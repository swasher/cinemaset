---
- hosts: all
  gather_facts: yes
  vars_files:
    - group_vars/all.yml
    - group_vars/vault.yml

  tasks:

  - name: super user existed?
    command: bash -c "echo \"from django.contrib.auth import get_user_model; User = get_user_model(); print(User.objects.filter(email='{{superuseremail}}').count()>0)\" | {{virtualenv}}/bin/python ./manage.py shell"
    args:
      chdir: "{{project_root}}"
    environment:
      DJANGO_SETTINGS_MODULE: "{{settings}}"
    register: superuser_existed

  - debug:
      msg: "{{superuser_existed.stdout_lines}}"
      verbosity: 2


    # This suitable only when we change User model with USERNAME_FIELD = 'email'
    # For usual User add `--username={{superusername}}`

    # This do not work if code mapped to vagrant share (manage.py isn't executable)
    #  - name: Create super user [with email as username]
    #    django_manage:
    #      command: createsuperuser --noinput --email='{{superuseremail}}'
    #      app_path: "{{project_root}}"
    #      virtualenv: "{{virtualenv}}"
    #      settings: "kinobase.settings"
    #    #args:
    #    #  chdir: "{{project_root}}"
    #    environment:
    #      DJANGO_SETTINGS_MODULE: "{{settings}}"
    #    when: not superuser_existed.stdout_lines|bool

  - name: Create super user [with email as username]
    shell: source {{virtualenv}}/bin/activate && python manage.py createsuperuser --noinput --email='{{superuseremail}}'
    args:
      chdir:  "{{project_root}}"
      executable: /bin/bash
    when: not superuser_existed|bool


  - name: Install expect
    apt:
      pkg: "{{item}}"
      state: installed
      update-cache: yes
    with_items:
      - expect
    become: yes


  - name: Change password tricks. Using email instead name.
    # you change permission for script in vagrant share folder, so let's use /tmp
    blockinfile:
      path: "/tmp/changepassword.sh"
      block: |
        #!/usr/bin/expect
        set timeout -1;
        spawn {{virtualenv}}/bin/python manage.py changepassword {{superuseremail}};
        expect {
            "Password:" { exp_send "{{superuserpassword}}\r" ; exp_continue }
            "Password (again):" { exp_send "{{superuserpassword}}\r" ; exp_continue }
            eof
        }
      create: yes
      mode: 0755

  - name: Change password
    command: "expect /tmp/changepassword.sh"
    args:
      chdir: "{{project_root}}"
    environment:
      DJANGO_SETTINGS_MODULE: "{{settings}}"


  - name: remove changepassword.sh
    file:
      path: "/tmp/changepassword.sh"
      state: absent